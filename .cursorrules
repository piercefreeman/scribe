Only ever put imports at the top of the file. Never embed them with functions unless you're
explicitly solving an import cycle, at which point you should reconsider the design to see if you
should move the common components into a third file.

When you're making changes to existing functionality, always run `uv run pytest -vvv` to ensure
that your changes haven't broken the tests. Consider whether the tests should be changed then
change the tests or the logic.

Always do imports from the current project as absolute imports: `from {myproj}.file import {items}`

When you have finished implementing a new feature, or fixing changes, AFTER you have confirmed things
work by running the tests, you should also run the linting and verify that all of the changes
are using valid Python. Run `make lint` to run our full linting pipeline.

Some general coding conventions you should obey:
- Don't nest functions in other functions. Prefer partial() to embedding nested functions. In the rare situation that it's really cleaner to nest functions (some recursive calls potentially), justify the nesting via a comment.
- When if statements with a large amount of logic, consider whether it's better to terminate out the function early by checking the if(inverse condition) and then just returning
- You shouldn't shy away from raising exceptions loudly. If there's an issue with some logic we'd rather the user know and fail early. Justify why you need to wrap ANY code with try/catches - instead of just letting a higher layer of abstraction take care of it.
- Let's say you're writing a unit test for a piece of code in `builder.py`. You should write all relevant tests in `test_builder.py`. This 1:1 alignment of a unit test to the original file name makes it much easier to track down which logic is tested where.
